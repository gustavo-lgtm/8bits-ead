generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  passwordHash String?
  createdAt    DateTime     @default(now())

  enrollments  UserCourse[]
  accounts     Account[]
  sessions     Session[]
  unitProgress UserUnitProgress[]
  // Gamifica√ß√£o
  xpEvents     UserXPEvent[]
  xpBalances   UserXPBalance[]
}

model Course {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  createdAt    DateTime @default(now())  

  // imagens para os cards
  posterWideUrl   String? // 16:9 (card estendido)
  posterNarrowUrl String? // poster vertical/estreito    

  description     String? 

  // üî∏ novas propriedades
  category     CourseCategory @default(GAME_DEV)
  level        CourseLevel    @default(N1)

  unlockCodes  CourseUnlockCode[]
  enrollments  UserCourse[]
  modules      Module[]

  // Gamifica√ß√£o
  xpEvents     UserXPEvent[]
  xpBalances   UserXPBalance[]
  gamificationConfig CourseGamificationConfig?
}

enum CourseCategory {
  GAME_DEV   // üéÆ
  ROBOTIC    // ü§ñ
  MAKER      // üõ†Ô∏è
  AI         // üß†
  DIGITAL    // üëæ
}

enum CourseLevel {
  N1
  N2
  N3
}

model Module {
  id         String  @id @default(cuid())
  courseId   String
  slug       String
  title      String
  icon       String?
  sortIndex  Int     @default(0)

  description String? 
  posterUrl   String?   // üîπ imagem 16:9 do card do m√≥dulo

  // --- Gamifica√ß√£o ---
  isOptional   Boolean  @default(false)   // cap√≠tulo opcional (fora da pontua√ß√£o principal)
  bonusPercent Int      @default(10)      // % do b√¥nus ao concluir obrigat√≥rias

  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  units      Unit[]

  // Gamifica√ß√£o
  xpEvents   UserXPEvent[]

  @@unique([courseId, slug])
  @@index([courseId, sortIndex])
}

model Unit {
  id          String   @id @default(cuid())
  moduleId    String
  slug        String
  title       String
  type        UnitType
  youtubeId   String?
  driveFileId String?
  url         String?
  durationSec Int?
  sortIndex   Int       @default(0)
  requiresCompletedPrevious Boolean @default(false)
  isWelcome   Boolean  @default(false)

  description String? 
  posterUrl   String?   // üîπ imagem 16:9 do card do m√≥dulo

  // --- Gamifica√ß√£o ---
  isOptional Boolean   @default(false)    // trilha opcional (n√£o entra na principal)
  isExtra    Boolean   @default(false)    // desafio extra (entra na principal)
  xpMode     XPMode    @default(FIXED)    // FIXED ou QUIZ_PARTIAL
  xpValue    Int?                         // pontos fixos (FIXED)
  xpMax      Int?                         // teto de pontos (QUIZ_PARTIAL)

  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    UserUnitProgress[]
  // Gamifica√ß√£o
  xpEvents    UserXPEvent[]

  @@unique([moduleId, slug])
  @@index([moduleId, sortIndex])
}

enum UnitType {
  VIDEO
  DOC
  LINK
}

/* --- PROGRESSO DE AULA --- */
model UserUnitProgress {
  id            String          @id @default(cuid())
  userId        String
  unitId        String
  status        ProgressStatus  @default(IN_PROGRESS)
  lastViewedAt  DateTime        @default(now())
  completedAt   DateTime?

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  unit          Unit            @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@unique([userId, unitId])
  @@index([userId])
  @@index([unitId])
}

enum ProgressStatus {
  IN_PROGRESS
  COMPLETED
}

/* --- MATR√çCULA / DESBLOQUEIO --- */
model UserCourse {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  unlockedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model CourseUnlockCode {
  id        String       @id @default(cuid())
  courseId  String
  code      String       @unique
  status    UnlockStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  usedAt    DateTime?

  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

enum UnlockStatus {
  ACTIVE
  USED
  REVOKED
}

/* --- GAMIFICA√á√ÉO: Enums --- */
enum XPMode {
  FIXED
  QUIZ_PARTIAL
}

enum XPType {
  MANDATORY   // Itens obrigat√≥rios
  EXTRA       // Desafios/atividades extras
  OPTIONAL    // Trilhas opcionais (n√£o contam na principal)
  BONUS       // B√¥nus por m√≥dulo
  WELCOME     // XP de boas-vindas
}

/* --- GAMIFICA√á√ÉO: Configura√ß√£o por curso --- */
model CourseGamificationConfig {
  id                   String  @id @default(cuid())
  courseId             String  @unique
  countExtraInPrimary  Boolean @default(true) // se false, EXTRA n√£o entra na principal
  xpWelcome            Int     @default(0)    // XP ao desbloquear curso (opcional)

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

/* --- GAMIFICA√á√ÉO: Eventos (log imut√°vel) --- */
model UserXPEvent {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  moduleId  String?
  unitId    String?
  eventType String   // "unit_completed" | "module_bonus" | "course_welcome"...
  xp        Int
  xpType    XPType
  meta      Json?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  unit   Unit?   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([userId, courseId, createdAt])
  @@index([courseId, moduleId, unitId])

  // Idempot√™ncia por alvo (aten√ß√£o: campos opcionais em UNIQUE permitem m√∫ltiplos NULL no SQLite)
  @@unique([userId, unitId, eventType])
  @@unique([userId, moduleId, eventType])
  @@unique([userId, courseId, eventType])
}

/* --- GAMIFICA√á√ÉO: Saldos materializados --- */
model UserXPBalance {
  id         String   @id @default(cuid())
  userId     String
  courseId   String

  xpMandatory Int     @default(0)  // tipo 1
  xpExtra     Int     @default(0)  // tipo 2
  xpOptional  Int     @default(0)  // tipo 3
  xpBonus     Int     @default(0)
  xpWelcome   Int     @default(0)

  xpPrimary   Int     @default(0)  // principal (regra do curso)
  xpTotal     Int     @default(0)  // primary + optional

  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId, xpPrimary])
}

/* --- NextAuth --- */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
